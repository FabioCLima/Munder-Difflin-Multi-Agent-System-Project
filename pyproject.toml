[project]
name = "munder-difflin-multi-agent-system"
version = "0.1.0"
description = "Multi-agent system for Munder Difflin Paper Company inventory and sales management"
readme = "README.md"
requires-python = ">=3.13"
authors = [
    { name = "Fabio Lima", email = "fabio@example.com" }
]
license = { text = "MIT" }

dependencies = [
    # Core dependencies (original)
    "pandas>=2.2.3",
    "openai>=1.76.0",
    "sqlalchemy>=2.0.40",
    "python-dotenv>=1.1.0",
    # Multi-agent framework
    "pydantic-ai>=0.0.14",
    "pydantic>=2.9.0",
    # Utilities
    "loguru>=0.7.3",
    "httpx>=0.27.0",
    "pylint>=4.0.2",
    "pytest>=8.4.2",
    "pytest-asyncio>=1.2.0",
    "pytest-cov>=7.0.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=8.3.0",
    "pytest-cov>=6.0.0",
    "pytest-asyncio>=0.24.0",
    
    # Code quality
    "ruff>=0.8.0",
    "mypy>=1.13.0",
    
    # Development tools
    "ipython>=8.29.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

# Configuração CRÍTICA para estrutura src/
[tool.hatch.build.targets.wheel]
packages = ["src"]

# Ruff - Linter e Formatter moderno
[tool.ruff]
line-length = 100
target-version = "py313"
src = ["src", "tests"]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "N",   # pep8-naming
]
ignore = [
    "E501",  # line too long (formatter handles this)
    "B008",  # function call in argument defaults
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"

# Pytest - Framework de testes
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",                          # verbose
    "-ra",                         # show summary of all test outcomes
    "--strict-markers",            # markers must be registered
    "--cov=src",                   # coverage do código em src/
    "--cov-report=term-missing",   # mostrar linhas não cobertas no terminal
    "--cov-report=html",           # gerar relatório HTML em htmlcov/
    "--cov-branch",                # coverage de branches (if/else)
]
markers = [
    "integration: marks tests as integration tests (deselect with '-m \"not integration\"')",
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
]

# MyPy - Type checker
[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Relaxado inicialmente
ignore_missing_imports = true  # Algumas libs podem não ter stubs
